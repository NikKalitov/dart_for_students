void main() {
  // dataTypes();
  // nullSafety();
  // arithmeticOperations();
  comparisonOperations();
}

/// Типы данных
void dataTypes() {
  /// типДанных имяПеременной = значениеПеременной;

  /// Как можно называть переменные
  // var fieldname;
  // var fieldName;
  // var field_name;
  // var field1;
  // var field_1;
  /// и т.д.
  /// В программировании приветствуется имя переменной с использованием
  /// camelCase, т.е. когда переменная начинается с маленькой буквы, а
  /// последующие слова с заглавной
  // var myNewField;

  /// символ = и есть оператор присваивания
  // var varString = 'varString';
  // var varInt = 5;
  // var varDouble = 4.7;
  // var varList = [1, 4, 7];
  // var varBool = true;
  /// и т.д.
  /// То есть var - это универсальное объявление переменной.
  /// Тип определяется присвоенным значением.
  /// Присваиваем строку - будет строка, число - будет число и т.д.
  // var studentName = 'Алексей';
  // var age = 20;

  /// Как можно понять по названию, dynamic - это динамический тип.
  /// Его особенность в том, что можно менять не только значение переменной,
  /// но и ее тип.
  /// Вот, например, мы поменяли строку на число, и наша программа
  /// не ругается.
  /// Этот тип данных бывает очень пригодится в последующем
  /// программировании во Flutter.
  // dynamic dynamicField = 'Я имя';
  // dynamicField = 6;

  /// Самый простой для понимания тип - boolean.
  /// Этот тип данных хранит в себе только два возможных значения
  /// true (правда) и false (ложь).
  // bool boolValue;
  // if (5 == 5) {
  //   /// 5 равно 5, поэтому это правда (true).
  //   boolValue = true;
  // }
  // if (5 == 4) {
  //   /// 5 не равно 4, поэтому это ложь (false).
  //   boolValue = false;
  // }

  /// int - это тип целочисленных данных.
  /// Вот, например, для количества студентов в группе разумно
  /// использовать целое число (тип int).
  // int numberOfStudents = 6;

  /// double - это число с дробной частью.
  /// Например, для среднего балла студента как раз и подойдет
  /// этот тип данных.
  // double averageScore = 3.84;

  /// String - строка. Текст, если говорить иначе.
  /// При инициализации необходимо ставить кавычки
  /// ('Дима'), ("Дима"), ('''Дима''').
  /// Для языка dart характерно использование одинарных кавычек
  /// ('Дима').
  // String name = 'Дима';

  /// В Dart можно менять значение переменной.
  // String changeMe = 'Поменяй моё значение';
  // changeMe = 'Моё новое значение';
  // int value = 5;
  // value = 20;

  /// Однако же, бывают ситуации, когда мы не хотим, чтобы значение менялось.
  /// Для этого можно использовать ключевые слова final и const.
  // final changeMe = 'Первое значение';
  // changeMe = 'Второе значение';
  // const changeMe = 'Первое значение';
  // changeMe = 'Второе значение';
  /// Ошибка.

  /// Главное отличие final от const заключается в том, что для ключевого слова
  /// final необязательно присваивать значение сразу.
  /// Память для переменной на устройстве выделяется во время выполнения.
  /// Для const же необходимо сразу определить значение, еще на этапе компиляции
  /// (сборка программы).
  // final String value;
  // value = 'Единственное значение';
  // const String value;
  /// Ошибка, потому что присвоить необходимо сразу.

  /// Чтобы выводить в консоль значения наших переменных, используем следующую
  /// функцию:
  // String stringValue = 'Значение';
  // int intValue = 10;
  // bool boolValue = true;
  // print(boolValue);
  /// Эта функция позволяет выводить значения различных типов данных, в т.ч.
  /// и тех типов, которые создал программист.
}

/// Null-safety, nullable, non-nullable
void nullSafety() {
  /// В языке Dart есть null-safety (null-безопасность). В программировании
  /// бывают случаи, когда переменная не содержит в себе данные. Null-safety как
  /// раз и есть механизм, который позволяет на этапе написания кода продумывать,
  /// какая переменная и когда может быть пустой. И может ли вообще.
  /// Nullable переменная - это переменная, которая может принимать пустое
  /// значение (null). Non-nullable, в свою очередь, не может принимать null.
  ///
  /// Например, int value = 0 еще не значит, что в переменной value нет значения.
  /// 0 - тоже какое-то значение. А вот тип null означает, что переменная пустая.
  /// Чтобы переменная могла принимать значение null и чтобы на эту переменную
  /// распространялись null-safety проверки, после типа переменной необходимо
  /// ставить символ "?".
  // dynamic name;
  // name = null;
  // name = 'Значение';
  // print(name);

  /// В некоторых случаях наша nullable переменная должна стать non-nullable,
  /// т.е. значение null не допускается
  // void iDoNotGetNull(String value) {
  //   print(value);
  // }

  /// Например, эта функция принимает только non-nullable типы. Т.е. она не
  /// обрабатывает переменные, которые могут быть null.

  /// Чтобы сделать из nullable переменной non-nullable, после переменной нужно
  /// поставить символ "!".
  // name = null;
  // iDoNotGetNull(name!);

  /// В данном случае будет выводиться ошибка. Но это пример, который объясняет
  /// описанный выше принцип.
  /// Многие говорят, что стоит избегать связки "?" и "!". Ведь если
  /// программист неверно убедил программу в отсутствии null (используя "!"),
  /// может случиться ошибка, которая всё поломает. Пример такой ошибки выше.

  /// Чтобы обработать такую ошибку, в Dart есть оператор "??". Он позволяет
  /// проверить, рано ли значение переменной null. И сели да, присвоить ей
  /// другое значение.
  // dynamic value = 10;
  // dynamic value = null;
  // print(value ?? 5);

  /// Если переменная null, то ей присваивается значение справа от оператора "??".
  /// Если же переменная не равно null, то оператор ничего не переопределяет.
}

/// Арифметические операции
void arithmeticOperations() {
  // int a = 30;
  // int b = 5;
  // int c = 8;

  /// "+" - это операция сложения
  // print(a + b);

  /// "-" - это операция вычитания
  // print(a - b);

  /// "/" - это операция деления
  // print(a / b);
  // print(a / c);

  /// "~/" - это операция деления нацело
  // print(a ~/ c);

  /// "%" - это операция получения остатка от деления
  // print(a ~/ c);

  /// Порядок выполнения операций такой же, как в математике
  /// В т.ч. и скобки
  // print('($a + $b) / $c = ${(a + b) / c}');
}

/// Операции сравнения
void comparisonOperations() {
  // int a = 5;
  // int b = 10;
  // int c = 8;
  // int d = 5;

  /// Операции сравнения:
  /// больше ">"
  // print('a > b : ${a > b}');
  /// меньше "<"
  // print('a < b : ${a < b}');
  /// равно "=="
  // print('a == b : ${a == b}');
  /// не равно "!="
  // print('a != d : ${a != d}');
  /// больше или равно ">="
  // print('a >= b : ${a >= b}');
  /// меньше или равно "<="
  // print('a <= b : ${a <= b}');
}
