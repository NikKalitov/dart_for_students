void main() {
  // dataTypes();
  nullSafety();
}

void dataTypes() {
  /// типДанных имяПеременной = значениеПеременной;

  /// Как можно называть переменные
  // var fieldname;
  // var fieldName;
  // var field_name;
  // var field1;
  // var field_1;
  /// и т.д.
  /// В программировании приветствуется имя переменной с использованием
  /// camelCase, т.е. когда переменная начинается с маленькой буквы, а
  /// последующие слова с заглавной
  // var myNewField;

  /// символ = и есть оператор присваивания
  // var varString = 'varString';
  // var varInt = 5;
  // var varDouble = 4.7;
  // var varList = [1, 4, 7];
  // var varBool = true;
  /// и т.д.
  /// То есть var - это универсальное объявление переменной.
  /// Тип определяется присвоенным значением.
  /// Присваиваем строку - будет строка, число - будет число и т.д.
  // var studentName = 'Алексей';
  // var age = 20;

  /// Как можно понять по названию, dynamic - это динамический тип.
  /// Его особенность в том, что можно менять не только саму переменную,
  /// которую он хранит, но и тип этой переменной.
  /// Вот, например, мы поменяли строку на число, и наша программа
  /// не ругается.
  /// Этот тип данных бывает очень пригодится в последующем
  /// программировании во Flutter.
  // dynamic dynamicField = 'Я имя';
  // dynamicField = 6;

  /// Самый простой для понимания тип - boolean.
  /// Этот тип данных хранит в себе только два возможных значения
  /// true (правда) и false (ложь).
  /// Например, на улице солнечно. Это ложь. А может, это и правда.
  /// Решать вам =)
  // bool itIsSunnyOutside = false;

  /// int - это тип целочисленных данных (то есть натуральные числа).
  /// Вот, например, для количества студентов в группе разумно
  /// использовать целое число (тип int).
  // int numberOfStudents = 6;

  /// double - это число с дробной частью (есть цифры после запятой)
  /// Например, для среднего балла студента как раз и подойдет
  /// этот тип данных.
  // double averageScore = 3.8;

  /// String - строка. Текст, если говорить иначе.
  /// При инициализации необходимо ставить кавычки
  /// ('Дима'), ("Дима"), ('''Дима''').
  /// Для языка dart характерно использование одинарных кавычек
  /// ('Дима').
  // String name = 'Дима';

  /// В Dart можно менять значение переменной.
  // String changeMe = 'Поменяй моё значение';
  // changeMe = 'Моё новое значение';
  // int value = 5;
  // value = 20;

  /// Однако же, бывают ситуации, когда мы не хотим, чтобы значение менялось.
  /// Для этого можно использовать ключевые слова final и const.
  // final changeMe = 'Первое значение';
  // changeMe = 'Второе значение';
  // const changeMe = 'Первое значение';
  // changeMe = 'Второе значение';
  /// Ошибка.

  /// Главное отличие final от const заключается в том, что для ключевого слова
  /// final необязательно присваивать значение сразу.
  /// Память для переменной на устройстве выделяется во время выполнения.
  /// Для const же необходимо сразу определить значение, еще на этапе компиляции
  /// (сборка программы).
  // final String value;
  // value = 'Единственное значение';
  // const String value;
  /// Ошибка, потому что присвоить необходимо сразу.

  /// Чтобы выводить в консоль значения наших переменных, используем следующую
  /// функцию:
  // String stringValue = 'Значение';
  // int intValue = 10;
  // bool boolValue = true;
  // print(boolValue);
  /// Эта функция позволяет выводить значения различных типов данных, в т.ч.
  /// и тех типов, которые создал программист.
}

void nullSafety() {
  /// В языке Dart есть null-safety. В программировании бывают случаи, когда
  /// переменная не содержит в себе данные.
  /// Например, int value = 0 еще не значит, что в переменной value нет значения.
  /// 0 - тоже какое-то значение. А вот тип null означает, что переменная пустая.
  /// Чтобы переменная могла принимать значение null и чтобы на эту переменную
  /// распространялись null-safety проверки, после типа переменной необходимо
  /// ставить символ "?".
  String? name;
  name = null;
  name = 'Значение';
  print(name);

  /// В некоторых случаях наша nullable переменная должна стать non-nullable,
  /// т.е. у нее не должно быть значения null
  void iDoNotGetNull(String value) {
    print(value);
  }

  /// Например, эта функция принимает только non-nullable типы. Т.е. эта функция
  /// не будет запускаться, если значение переменной будет пустым (null).

  /// Чтобы сделать из nullable переменной non-nullable, после
  iDoNotGetNull(name);
}
